{"version":3,"sources":["index.js"],"names":["App","state","now","uploadPercentage","done","url","handleSubmit","e","a","preventDefault","formData","FormData","append","target","foo","files","fileName","value","axios","post","headers","onUploadProgress","progressEvent","setState","Math","round","loaded","total","res","videoId","data","uuid","percent","ProcessingIntervalFunc","setInterval","console","log","get","then","clearInterval","encType","onSubmit","this","type","name","className","style","width","animated","React","Component","ReactDOM","render","document","querySelector"],"mappings":"2RASMA,G,kNACFC,MAAQ,CACJC,IAAI,EACJC,iBAAiB,EACjBC,MAAK,EACLC,IAAI,I,EAERC,a,uCAAe,WAAOC,GAAP,yBAAAC,EAAA,6DACXD,EAAEE,kBAEIC,EAAW,IAAIC,UACZC,OAAO,MAAML,EAAEM,OAAOC,IAAIC,MAAM,IACzCL,EAASE,OAAO,WAAWL,EAAEM,OAAOG,SAASC,OACvCD,EAAWT,EAAEM,OAAOG,SAASC,MANxB,kBAQWC,IAAMC,KAAK,UAAUT,EAAS,CAC5CU,QAAQ,CACJ,eAAe,uBAEnBC,iBAAkB,SAAAC,GACd,EAAKC,SAAS,CAACpB,iBAAiBqB,KAAKC,MAA8B,IAAvBH,EAAcI,OAAeJ,EAAcK,YAbxF,OAQDC,EARC,OAiBDC,EAAUD,EAAIE,KAAKC,KAErBC,EAAU,EAmBRC,EAAyBC,aAjBV,WACjBC,QAAQC,IAAIJ,GACRA,EAAU,IACVd,IAAMmB,IAAN,0BAA6BR,IAC5BS,MAAK,SAACR,GACH,EAAKP,SAAS,CAACrB,IAAI4B,EAAKA,KAAKE,UAC7BA,EAAUF,EAAKA,KAAKE,WAGP,MAAZA,IACL,EAAKT,SAAS,CACVnB,MAAK,EAAKC,IAAI,iCAAD,OAAkCW,EAAlC,oBAEjBuB,cAAcN,MAOlB,KAKJE,QAAQC,IAAIP,GA9CL,kDAkDPM,QAAQC,IAAR,MAlDO,0D,6GAsDX,OACI,6BACI,0BAAOI,QAAQ,sBAAsBC,SAAUC,KAAKpC,cAChD,2BAAOqC,KAAK,OAAOC,KAAK,WAAWC,UAAU,SAAQ,6BACrD,2BAAOF,KAAK,OAAOC,KAAK,MAAOC,UAAU,SAAQ,6BACjD,4BAAQF,KAAK,SAASE,UAAU,wBAAhC,WAEJ,uCACA,yBAAKC,MAAO,CAACC,MAAM,UACf,kBAAC,IAAD,CAAaC,UAAQ,EAAC9C,IAAKwC,KAAKzC,MAAME,oBAE1C,wCACA,yBAAK2C,MAAO,CAACC,MAAM,UACf,kBAAC,IAAD,CAAaC,UAAQ,EAAC9C,IAAKwC,KAAKzC,MAAMC,OAE1C,yBAAK2C,UAAU,QAEPH,KAAKzC,MAAMG,MAAQ,2BAAIsC,KAAKzC,MAAMI,W,GA9ExC4C,IAAMC,YAuFxBC,IAASC,OAAO,kBAACpD,EAAD,MAAOqD,SAASC,cAAc,W","file":"static/js/main.aa40a996.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {ProgressBar} from 'react-bootstrap';\r\nimport './index.css';\r\nimport axios from 'axios';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n// import 'bootstrap/dist/js/bootstrap.min.js';\r\n\r\nclass App extends React.Component{\r\n    state = {\r\n        now:0,\r\n        uploadPercentage:0,\r\n        done:false,\r\n        url:''\r\n    }\r\n    handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        \r\n        const formData = new FormData();\r\n        formData.append('foo',e.target.foo.files[0])\r\n        formData.append('fileName',e.target.fileName.value)\r\n        const fileName = e.target.fileName.value;\r\n        try{\r\n            const res = await axios.post('/upload',formData,{\r\n                headers:{\r\n                    'Content-Type':'multipart/form-data'\r\n                },\r\n                onUploadProgress: progressEvent => {\r\n                    this.setState({uploadPercentage:Math.round((progressEvent.loaded * 100 / progressEvent.total))})\r\n                }\r\n            })\r\n\r\n            const videoId = res.data.uuid;\r\n\r\n            let percent = 0;\r\n\r\n            const GetandUpdate = () => {\r\n                console.log(percent)\r\n                if (percent < 100){\r\n                    axios.get(`/processed-info/${videoId}`)\r\n                    .then((data) => {\r\n                        this.setState({now:data.data.percent});\r\n                        percent = data.data.percent;\r\n                    })\r\n                }\r\n                else if (percent === 100) {\r\n                    this.setState({\r\n                        done:true,url:`http://localhost:5000/uploads/${fileName}-processed.mp4`\r\n                    })\r\n                    clearInterval(ProcessingIntervalFunc)\r\n                }\r\n            }\r\n\r\n            const ProcessingIntervalFunc = setInterval(\r\n                GetandUpdate\r\n                ,\r\n                1000\r\n            )\r\n\r\n\r\n\r\n            console.log(videoId)\r\n\r\n        }\r\n        catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n    render(){\r\n        return (\r\n            <div>\r\n                <form  encType=\"multipart/form-data\" onSubmit={this.handleSubmit}>\r\n                    <input type=\"text\" name=\"fileName\" className=\"my-2\"/><br/>\r\n                    <input type=\"file\" name=\"foo\"  className=\"my-2\"/><br/>\r\n                    <button type=\"submit\" className=\"btn btn-primary my-5\">Submit</button>\r\n                </form>\r\n                <p>Uploaded</p>\r\n                <div style={{width:\"300px\"}}>  \r\n                    <ProgressBar animated now={this.state.uploadPercentage} />\r\n                </div>\r\n                <p>Processed</p>\r\n                <div style={{width:\"300px\"}}>  \r\n                    <ProgressBar animated now={this.state.now} />\r\n                </div>\r\n                <div className=\"my-5\">\r\n                    {\r\n                        this.state.done && <p>{this.state.url}</p>\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nReactDOM.render(<App/>,document.querySelector(\"#root\"))"],"sourceRoot":""}